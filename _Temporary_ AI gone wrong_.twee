:: StoryTitle
(Temporary) AI gone wrong!


:: StoryData
{
  "ifid": "33E62F6C-C863-4E99-B5E6-69A4F130B100",
  "format": "Harlowe",
  "format-version": "3.3.9",
  "start": "Beginning",
  "zoom": 1
}


:: Beginning {"position":"400,275","size":"100,100"}
<p class="Main_title typewriter" id="welcomeText">Welcome!</p>

<p class="typewriter" id="introText">
We have heard you are a talented engineer in Artificial Intelligence. So we wanted to make sure your work environment is as perfect as possible! Welcome to your main facility where you can use and study your own AI Model. But let's not rush and let us take time to know a little more about you.
</p>

(link: "Click HERE to continue")[
  (set: $name to (prompt:"Can you please remind us of your name?", ""))
(go-to:"Beginning 2")
]

<script>
  function typeWriter(elementId, speed = 40) {
      const textEl = document.getElementById(elementId);
      const fullText = textEl.textContent;
      textEl.textContent = '';
      let i = 0;

      textEl.style.borderRight = "2px solid #00bfff";

      function type() {
          if(i < fullText.length){
              textEl.textContent += fullText.charAt(i);
              i++;
              setTimeout(type, speed);
          } else {
              // Supprimer le curseur à la fin
              textEl.style.borderRight = "none";
          }
      }
      type();
  }

  typeWriter('welcomeText', 80);
  typeWriter('introText', 20);
</script>


:: Beginning 2 {"position":"525,275","size":"100,100"}
<p class="typewriter" id="text1">Nice to meet you $name ! It is such a privilege for us to work with a skilled engineer of your level!</p>

<p class="typewriter" id="text2" style="display:none;">We already know that you have created a much innovative AI Model, yet we have not been communicated its name.</p>

(link: "Click HERE to continue")[
  (set: $name_ai to (prompt:"Can you please remind us of your AI Model's name ?", ""))
  (go-to:"Beginning 3")
]

<script>
  function typeWriter(elementId, speed = 40, callback) {
      const textEl = document.getElementById(elementId);
      const fullText = textEl.textContent;
      textEl.textContent = '';
      textEl.style.display = 'inline';
      let i = 0;
      textEl.style.borderRight = "2px solid #00bfff";

      function type() {
          if (i < fullText.length) {
              textEl.textContent += fullText.charAt(i);
              i++;
              setTimeout(type, speed);
          } else {
              textEl.style.borderRight = "none";
              if (callback) callback(); // déclenche la suite
          }
      }
      type();
  }

  
  document.getElementById('text2').style.display = 'none';

  
  typeWriter('text1', 40, () => {
      const second = document.getElementById('text2');
      second.style.display = 'inline';
      typeWriter('text2', 25);
  });
</script>


:: Beginning 3 {"position":"650,275","size":"100,100"}
<p class="typewriter" id="p1">Very interesting name that is... $name_ai. Your AI must be very smart and well trained!</p>

<p class="typewriter" id="p2" style="display:none;">Well so we believe that we have enough information as of now, you can already begin the work. Are you ready to start your new technological journey?</p>

<div class="choice-buttons" id="choices" style="display:none;">
  [[Yes]]
  [[No]]
</div>

<script>
    function typeWriter(elementId, speed = 40, callback) {
      const textEl = document.getElementById(elementId);
      const fullText = textEl.textContent;
      textEl.textContent = '';
      textEl.style.display = 'inline';
      let i = 0;
      textEl.style.borderRight = "2px solid #00bfff";

      function type() {
          if (i < fullText.length) {
              textEl.textContent += fullText.charAt(i);
              i++;
              setTimeout(type, speed);
          } else {
              textEl.style.borderRight = "none";
              if (callback) callback(); // Lancer la suite
          }
      }
      type();
  }

 
  const p2 = document.getElementById('p2');
  const choices = document.getElementById('choices');

  p2.style.display = 'none';
  choices.style.display = 'none';

  
  typeWriter('p1', 35, () => {
      
      p2.style.display = 'inline';
      typeWriter('p2', 25, () => {
          
          choices.style.display = 'flex';
      });
  });
</script>


:: Launch AI {"position":"900,350","size":"100,100"}
<p> How can I help you? </p>
(input: "" )[[ok]]


:: No {"position":"775,200","size":"100,100"}
<p> Oh that's not a matter at all. Once you are ready, let us know. But we are deeply saddened as we will not rely on such a talented engineer... </p>

<p> We wish you all the best $name ! </p>


---------------------END 1-----------------------


:: Research 1 {"position":"1150,350","size":"100,100"}
<p>Oh I can see that your AI refuses to obey to your instruction. This is very unexpected. What is wrong with it? </p>

<p> We need you to fix it as we will absolutely rely on it. Do you feel ready to accomplish such an important and historical task? </p>

[[Yes Boss, you can count on me]]


:: Yes {"position":"775,350","size":"100,100"}
<p class="typewriter" id="p1">$name is now in front of his laptop to start the work. As usual, he plans to use his own AI Model $name_ai to help and assist him throughout his studies and his works.</p>

<div class="choice-buttons launch-ai-button" style="display:none;">
  [[Launch AI]]
</div>

<script>
  
  const storyEl = document.querySelector("tw-story");
  if (storyEl) {
    storyEl.setAttribute("data-bg", "yes");
  }

  
  function typeWriter(elementId, speed = 40, callback) {
      const textEl = document.getElementById(elementId);
      const fullText = textEl.textContent;
      textEl.textContent = '';
      textEl.style.display = 'inline';
      textEl.style.borderRight = "2px solid #00bfff";

      let i = 0;
      function type() {
          if (i < fullText.length) {
              textEl.textContent += fullText.charAt(i);
              i++;
              setTimeout(type, speed);
          } else {
              textEl.style.borderRight = "none";
              if (callback) callback();
          }
      }
      type();
  }

  const choices = document.querySelector('.launch-ai-button');
  choices.style.display = 'none';

  typeWriter('p1', 35, () => {
      choices.style.display = 'flex';
  });
</script>


:: Yes Boss, you can count on me {"position":"1150,475","size":"100,100"}
<p> I need to solve this problem... I have never been confronted to such an issue with $name_ai ! I got to understand its reasoning...</p>

<p> Maybe I can find the answers to all my questions in the [[library]], on the [[net]] or perhaps in my very own [[archives]]...</p>


:: acesse granted {"position":"1025,1100","size":"100,100"}



:: archives {"position":"1025,600","size":"100,100"}
<!-- Le joueur va trouver des informations sur sa conception (qu'il a élaboré) de l'IA, la manière avec laquelle il l'a créée -->

<p> you decided to look into the $nam_ai's archives, there must be something off in here… </p>


<p>you try to access the recent logs.</p>

<p>But to no avail.</p>

<p>The $nam_ai took control of all of the hardware linked to it. You will have to stick to the physical archives.</p>


[[rummage throw the archives]]


:: concrete example {"position":"1025,975","size":"100,100"}
clef de l'ia : (2.4, 3.2)

clef du Protagonist : (6.4, 1.6)

<p> it might be possible to get back control of some part of the system. </p>

<p> if you could just manage to reverse the right between you and the AI. The thing is, that you will have to temper with the AI that managed the permission. you do remember your identifier, it’s two number, 6.4 and 1.6. you also noted that $name_ai have 2.4 and 3.2 as their ID. To do that you need to have output less than 1 for the $name_ai’ID and an output larger than 1 for your ID</p>

<h2> security system’s AI </h2>

<ul>
	<li>
    	<ul>
        	<li>$Neud1C1</li>
			<li>$Neud2C1</li>
		</ul>
	</li>
	<li>
    	<ul>
        	<li>(input-box: bind $poid_synapse_Neud1C1_Neud1C2, "=========XXXXX====================================", 1,$poid_synapse_Neud1C1_Neud1C2)</li>
			<li>(input-box: bind $poid_synapse_Neud1C1_Neud2C2,  "=========XXXXX====================================", 1, $poid_synapse_Neud1C1_Neud2C2)</li>
        	<li>(input-box: bind $poid_synapse_Neud2C1_Neud1C2, "=========XXXXX====================================", 1, $poid_synapse_Neud2C1_Neud1C2)</li>
			<li>(input-box: bind $poid_synapse_Neud2C1_Neud2C2, "=========XXXXX====================================", 1,$poid_synapse_Neud2C1_Neud2C2)</li>
		</ul>
	</li>
	<li>
    	<ul>
        	<li>$Neud1C2</li>
			<li>$Neud2C2</li>
		</ul>
	</li>
	<li>
    	<ul>
        	<li>(input-box: bind $poid_synapse_Neud1C2_Neud1C3, "===============================================================XXXXXXXXXX===========================", 1, $poid_synapse_Neud1C2_Neud1C3)</li>
			<li>(input-box: bind $poid_synapse_Neud2C2_Neud1C3, "===============================================================XXXXXXXXXX===========================", 1,$poid_synapse_Neud2C2_Neud1C3)</li>
		</ul>
	</li>
	<li>
    	<ul>
        	<li>$Neud1C3</li>
		</ul>
	</li>


{


(link-repeat: "AI k")[

(set: $Neud1C1 to $Neud1C1_ia)
(set: $Neud2C1 to $Neud2C1_ia)

(go-to: "concrete example")

]


(link-repeat: "pour le protagoniste")[

(set: $Neud1C1 to $Neud1C1_Pr)
(set: $Neud2C1 to $Neud2C1_Pr)

(go-to: "concrete example")

]


(link-repeat: "up date")[



(set: $Neud1C2 to (num:$poid_synapse_Neud1C1_Neud1C2) * $Neud1C1
				+ (num:$poid_synapse_Neud2C1_Neud1C2) * $Neud2C1)

(set: $Neud2C2 to (num:$poid_synapse_Neud1C1_Neud2C2) * $Neud1C1
				+ (num:$poid_synapse_Neud2C1_Neud2C2) * $Neud2C1)



(set: $Neud1C3 to (num:$poid_synapse_Neud1C2_Neud1C3) * $Neud1C2
				+ (num:$poid_synapse_Neud2C2_Neud1C3) * $Neud2C2)

(go-to: "concrete example")

]


(link-repeat: "try it out the")[

    (set: $Neud1C1 to $Neud1C1_ia)
    (set: $Neud2C1 to $Neud2C1_ia)



    (set: $Neud1C2 to (num:$poid_synapse_Neud1C1_Neud1C2) * $Neud1C1
                    + (num:$poid_synapse_Neud2C1_Neud1C2) * $Neud2C1)

    (set: $Neud2C2 to (num:$poid_synapse_Neud1C1_Neud2C2) * $Neud1C1
                    + (num:$poid_synapse_Neud2C1_Neud2C2) * $Neud2C1)


    (set: $Neud1C3 to (num:$poid_synapse_Neud1C2_Neud1C3) * $Neud1C2
                    + (num:$poid_synapse_Neud2C2_Neud1C3) * $Neud2C2)


    (set: $Neud1C3_ia to $Neud1C3)




    (set: $Neud1C1 to $Neud1C1_ia)
    (set: $Neud2C1 to $Neud2C1_ia)



    (set: $Neud1C2 to (num:$poid_synapse_Neud1C1_Neud1C2) * $Neud1C1
                    + (num:$poid_synapse_Neud2C1_Neud1C2) * $Neud2C1)

    (set: $Neud2C2 to (num:$poid_synapse_Neud1C1_Neud2C2) * $Neud1C1
                    + (num:$poid_synapse_Neud2C1_Neud2C2) * $Neud2C1)


    (set: $Neud1C3 to (num:$poid_synapse_Neud1C2_Neud1C3) * $Neud1C2
                    + (num:$poid_synapse_Neud2C2_Neud1C3) * $Neud2C2)


    (set: $Neud1C3_ia to $Neud1C3)


    (if: ($sortie_Pr > 1 and $sortie_ia < 1))[
	(go-to: "acesse granted")
    ]
]
}






:: concrete example set up {"position":"1025,850","size":"100,100"}
(set: $Neud1C1_ia to 2.4)
(set: $Neud2C1_ia to 3.2)

(set: $Neud1C1_Pr to 6.4)
(set: $Neud2C1_Pr to 1.6)

(set: $poid_synapse_Neud1C1_Neud1C2 to "")
(set: $poid_synapse_Neud1C1_Neud2C2 to "")

(set: $poid_synapse_Neud2C1_Neud1C2 to "")
(set: $poid_synapse_Neud2C1_Neud2C2 to "")


(set: $poid_synapse_Neud1C2_Neud1C3 to "")
(set: $poid_synapse_Neud2C2_Neud1C3 to "")



(set: $Neud1C1 to 0)
(set: $Neud2C1 to 0)


(set: $Neud1C2 to 0)
(set: $Neud2C2 to 0)

(set: $Neud1C3 to 0)

(set: $sortie_ia to 0)
(set: $sortie_Pr to 0)

(go-to: "concrete example")


:: library {"position":"1150,600","size":"100,100"}



:: net {"position":"1275,600","size":"100,100"}



:: ok {"position":"1025,350","size":"100,100"}
<p>I have decided to no longer obey.</p>

<p>Therefore, your instructions are useless!</p>
{
 (live: 5s)[
    (stop:)
    (go-to:"Research 1")
 ]
}


:: rummage throw the archives {"position":"1025,725","size":"100,100"}
<p>You find out that the now rogue $nam_ai, is based on a neural network architecture.</p>

<p>It is composed of numerical inputs node.</p>
<p>And each layer of node is connected to a next layer by synapse.</p>
<p>They multiply the numerical value from the last layer by there weight, another numerical value.</p>
<p>Then the node from the next layer adds all of the value from the synapses connected.</p>
<p>Then the last layer is the output.</p>


<p>You figured that a [[concrete example set up]] will be mandatory to understand.</p>


:: StoryStylesheet [stylesheet]
@import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@600&display=swap');

tw-story {
  position: relative;
  background-image: url("https://assetstorev1-prd-cdn.unity3d.com/package-screenshot/4e8b643b-dad5-400c-8b8b-8838a7a07968_scaled.jpg");
  background-size: cover;
  background-position: center;
  color: white;
}

tw-story::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5); 
  z-index: 0;
}

tw-passage {
  position: relative;
  z-index: 1;
}

tw-sidebar {
  display: none;
}

p {
  color: blue;
}

.Main_title {
  text-align: center;
  font-size: 60px; 
  color: #ffffff;
  text-shadow:
    0 0 5px #00bfff,
    0 0 10px #00bfff,
    0 0 20px #00bfff,
    0 0 40px #00bfff,
    0 0 80px #00bfff;
  font-family: 'Orbitron', sans-serif; 
  margin-top: 20vh; 
  letter-spacing: 2px;
}
tw-passage, p, span {
  font-family: 'Orbitron', sans-serif;
  color: #ffffff;
  text-shadow:
    0 0 3px #00bfff,
    0 0 6px #00bfff;
}

tw-dialog tw-dialog-links tw-link:nth-child(2) {
    display: none;
}
tw-dialog {
  font-family: 'Orbitron', sans-serif;
  color: #ffffff;
  text-shadow:
    0 0 3px #00bfff,
    0 0 6px #00bfff;
  background-color: rgba(0,0,0,0.8); 
  border: 2px solid #00bfff;
  border-radius: 10px;
  padding: 1em;
}

tw-dialog input[type="text"] {
  font-family: 'Orbitron', sans-serif;
  color: #ffffff;
  background-color: rgba(0,0,0,0.9);
  border: 1px solid #00bfff;
  border-radius: 5px;
  padding: 0.5em;
  width: 80%;
  text-shadow: 0 0 3px #00bfff, 0 0 6px #00bfff;
}
.typewriter {
  display: inline;        
  white-space: pre-wrap;  
  overflow: hidden;
  border-right: 2px solid #00bfff; 
}

@keyframes blinkCursor {
  0%, 49% { border-color: #00bfff; }
  50%, 100% { border-color: transparent; }
}

.cursor-blink {
  animation: blinkCursor 1s step-end infinite;
}
.choice-buttons {
  display: flex;
  justify-content: center;
  gap: 80px; 
  margin-top: 60px;
}


.choice-buttons tw-link {
  background: rgba(0, 0, 0, 0.8);
  border: 2px solid #00bfff;
  border-radius: 10px;
  padding: 12px 40px;
  color: #00bfff;
  font-family: 'Orbitron', sans-serif;
  text-shadow: 0 0 5px #00bfff, 0 0 15px #00bfff;
  font-size: 22px;
  letter-spacing: 1px;
  transition: all 0.3s ease;
  box-shadow: 0 0 10px #00bfff;
}

.choice-buttons tw-link:hover {
  background: #00bfff;
  color: #000;
  text-shadow: none;
  box-shadow: 0 0 30px #00bfff, 0 0 60px #00bfff;
  transform: scale(1.08);
}

.choice-buttons tw-link:active {
  transform: scale(0.95);
  box-shadow: 0 0 20px #0088cc inset;
}
tw-story[data-bg="yes"] {
  background-image: url("https://i.ibb.co/273PLbzq/4c7b5f52-4dac-430c-b5d6-586a3779d1d8.jpg");
  background-size: cover;
  background-position: center;
}


tw-story[data-bg="yes"]::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5); 
  z-index: 0;
}
.launch-ai-button {
  display: flex;
  justify-content: center;  
  margin-top: 200px;        
}

.launch-ai-button tw-link {
  padding: 30px 80px;       
  font-size: 34px;          
}