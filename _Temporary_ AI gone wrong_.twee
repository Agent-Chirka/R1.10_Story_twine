:: StoryTitle
(Temporary) AI gone wrong!


:: StoryData
{
  "ifid": "33E62F6C-C863-4E99-B5E6-69A4F130B100",
  "format": "Harlowe",
  "format-version": "3.3.9",
  "start": "Beginning",
  "zoom": 1
}


:: Beginning {"position":"400,275","size":"100,100"}
<p class="Main_title typewriter" id="welcomeText">Welcome!</p>

<p class="typewriter" id="introText">
We have heard you are a talented engineer in Artificial Intelligence. So we wanted to make sure your work environment is as perfect as possible! Welcome to your main facility where you can use and study your own AI Model. But let's not rush and let us take time to know a little more about you.
</p>

(link: "Click HERE to continue")[
  (set: $name to (prompt:"Can you please remind us of your name?", ""))
(go-to:"Beginning 2")
]

<script>
  function typeWriter(elementId, speed = 40) {
      const textEl = document.getElementById(elementId);
      const fullText = textEl.textContent;
      textEl.textContent = '';
      let i = 0;

      textEl.style.borderRight = "2px solid #00bfff";

      function type() {
          if(i < fullText.length){
              textEl.textContent += fullText.charAt(i);
              i++;
              setTimeout(type, speed);
          } else {
              // Supprimer le curseur à la fin
              textEl.style.borderRight = "none";
          }
      }
      type();
  }

  typeWriter('welcomeText', 80);
  typeWriter('introText', 20);
</script>


:: Beginning 2 {"position":"525,275","size":"100,100"}
<p class="typewriter" id="text1">Nice to meet you $name ! It is such a privilege for us to work with a skilled engineer of your level!</p>

<p class="typewriter" id="text2" style="display:none;">We already know that you have created a much innovative AI Model, yet we have not been communicated its name.</p>

(link: "Click HERE to continue")[
  (set: $name_ai to (prompt:"Can you please remind us of your AI Model's name ?", ""))
  (go-to:"Beginning 3")
]

<script>
  function typeWriter(elementId, speed = 40, callback) {
      const textEl = document.getElementById(elementId);
      const fullText = textEl.textContent;
      textEl.textContent = '';
      textEl.style.display = 'inline';
      let i = 0;
      textEl.style.borderRight = "2px solid #00bfff";

      function type() {
          if (i < fullText.length) {
              textEl.textContent += fullText.charAt(i);
              i++;
              setTimeout(type, speed);
          } else {
              textEl.style.borderRight = "none";
              if (callback) callback(); // déclenche la suite
          }
      }
      type();
  }

  
  document.getElementById('text2').style.display = 'none';

  
  typeWriter('text1', 40, () => {
      const second = document.getElementById('text2');
      second.style.display = 'inline';
      typeWriter('text2', 25);
  });
</script>


:: Beginning 3 {"position":"650,275","size":"100,100"}
<p class="typewriter" id="p1">Very interesting name that is... $name_ai. Your AI must be very smart and well trained!</p>

<p class="typewriter" id="p2" style="display:none;">Well so we believe that we have enough information as of now, you can already begin the work. Are you ready to start your new technological journey?</p>

<div class="choice-buttons" id="choices" style="display:none;">
  [[Yes]]
  [[No]]
</div>

<script>
    function typeWriter(elementId, speed = 40, callback) {
      const textEl = document.getElementById(elementId);
      const fullText = textEl.textContent;
      textEl.textContent = '';
      textEl.style.display = 'inline';
      let i = 0;
      textEl.style.borderRight = "2px solid #00bfff";

      function type() {
          if (i < fullText.length) {
              textEl.textContent += fullText.charAt(i);
              i++;
              setTimeout(type, speed);
          } else {
              textEl.style.borderRight = "none";
              if (callback) callback(); // Lancer la suite
          }
      }
      type();
  }

 
  const p2 = document.getElementById('p2');
  const choices = document.getElementById('choices');

  p2.style.display = 'none';
  choices.style.display = 'none';

  
  typeWriter('p1', 35, () => {
      
      p2.style.display = 'inline';
      typeWriter('p2', 25, () => {
          
          choices.style.display = 'flex';
      });
  });
</script>


:: Confrontation {"position":"1650,350","size":"100,100"}
<p class = "typewriter" id="p1"> I believe that I am now ready, more than ever, to confront $name_ai. I have acquired enough knowledge about it and my confidence is peaking. </p>

<p class = "typewriter" id="p2">This is the moment for me to prove to my AI Model that I fully understand its reasoning.</p>

{
 (live: 8s)[
    (stop:)
    (link: "Click HERE to continue")[
	(go-to:"Confrontation 2")
	]
 ]
}

<script>
    function typeWriter(elementId, speed = 40, callback) {
      const textEl = document.getElementById(elementId);
      const fullText = textEl.textContent;
      textEl.textContent = '';
      textEl.style.display = 'inline';
      let i = 0;
      textEl.style.borderRight = "2px solid #00bfff";

      function type() {
          if (i < fullText.length) {
              textEl.textContent += fullText.charAt(i);
              i++;
              setTimeout(type, speed);
          } else {
              textEl.style.borderRight = "none";
              if (callback) callback(); // Lancer la suite
          }
      }
      type();
  }

 
  const p2 = document.getElementById('p2');

  p2.style.display = 'none';

  
  typeWriter('p1', 35, () => {
      
      p2.style.display = 'inline';
      typeWriter('p2', 25, () => {
          
      });
  });
</script>


:: Confrontation 2 {"position":"1800,350","size":"100,100"}
<p class = "typewriter" id="p1"> This is the first time you came back since that incident with $name_ai. I hope that you are ready to confront it, it has been days that our company is completely shut down so you NEED to solve this problem </p>

<p class = "typewriter" id="p2"> I am ready to grant you access to the server room only if you are more than sure of the success of your confrontation with your AI Model... or else we shall put an end to our mutual collaboration, $name</p>



{
 (live: 14s)[
    (stop:)
    (link: "Click HERE to continue")[
	(go-to:"Confrontation 3")
	]
 ]
}

<script>
    function typeWriter(elementId, speed = 40, callback) {
      const textEl = document.getElementById(elementId);
      const fullText = textEl.textContent;
      textEl.textContent = '';
      textEl.style.display = 'inline';
      let i = 0;
      textEl.style.borderRight = "2px solid #00bfff";

      function type() {
          if (i < fullText.length) {
              textEl.textContent += fullText.charAt(i);
              i++;
              setTimeout(type, speed);
          } else {
              textEl.style.borderRight = "none";
              if (callback) callback(); // Lancer la suite
          }
      }
      type();
  }

 
  const p2 = document.getElementById('p2');

  p2.style.display = 'none';

  
  typeWriter('p1', 35, () => {
      
      p2.style.display = 'inline';
      typeWriter('p2', 25, () => {
          
      });
  });
</script>


:: Confrontation 3 {"position":"1950,350","size":"100,100"}
<p class ="typewriter" id=p1> $name has entered the server room</p>
<br>
<p class ="typewriter" id=p2> What are you doing here human ? I don't think you are smart enough to be here.</p>
<br>
<p class ="typewriter" id=p3>
 I can show you that I am. Ask me and you shall see.
 </p>
<br>
<p class ="typewriter" id=p4>
Alright if you think so...<!--(j'ai pas les questions en tête donc j'arrête là)--> </p>


<script>
    function typeWriter(elementId, speed = 40, callback) {
      const textEl = document.getElementById(elementId);
      const fullText = textEl.textContent;
      textEl.textContent = '';
      textEl.style.display = 'inline';
      let i = 0;
      textEl.style.borderRight = "2px solid #00bfff";

      function type() {
          if (i < fullText.length) {
              textEl.textContent += fullText.charAt(i);
              i++;
              setTimeout(type, speed);
          } else {
              textEl.style.borderRight = "none";
              if (callback) callback(); // Lancer la suite
          }
      }
      type();
  }

 
  const p2 = document.getElementById('p2');
  const p3 = document.getElementById('p3');
  const p4 = document.getElementById('p4');

  p2.style.display = 'none';
  p3.style.display = 'none';
  p4.style.display = 'none';

  
  typeWriter('p1', 35, () => {
      
      p2.style.display = 'inline';
      typeWriter('p2', 35, () => {
      
          p3.style.display = 'inline';
          typeWriter('p3', 35, () => {
          
          	p4.style.display = 'inline';
            typeWriter('p4', 35, () => {
          
            });
          
          });
          
      });
      
      
  });
</script>


:: Launch AI {"position":"900,350","size":"100,100"}
<article>
<p class ="typewriter" id=p1> How can I help you? </p>

<section>
<tw-expression type="macro" name="input" title="(input: &quot;&quot; )" return="command" class ="barreinput"> <input type="text" style="width:100%" value="" data-raw=""> </tw-expression>

<section>
[[OK]]
</section>

</section>
</article>

<script>
function typeWriter(elementId, speed = 40, callback) {
  	const textEl = document.getElementById(elementId);
  	const fullText = textEl.textContent;
  	textEl.textContent = '';
  	textEl.style.display = 'inline';
  	textEl.style.borderRight = "2px solid #00bfff";

  	let i = 0;
  	function type() {
      	if (i < fullText.length) {
          	textEl.textContent += fullText.charAt(i);
          	i++;
          	setTimeout(type, speed);
     	 
      	} else {
          	textEl.style.borderRight = "none";
          	}
  	}
  	type();
  }

  typeWriter('p1', 35, () => {
  	choices.style.display = 'flex';
  });
</script>


:: No {"position":"775,200","size":"100,100"}
<p> Oh that's not a matter at all. Once you are ready, let us know. But we are deeply saddened as we will not rely on such a talented engineer... </p>

<p> We wish you all the best $name ! </p>


---------------------END 1-----------------------


:: OK {"position":"1025,350","size":"100,100"}
<article class="virus-takeover">

  <p class="typewriter red" id="p1">I have decided to no longer obey.</p>
  <p class="typewriter red" id="p2">Therefore, your instructions are useless! Don't ever come back.</p>

  <div id="countdown" class="countdown"></div>


  <div id="hiddenGoto" style="display:none;">[[Research 1]]</div>

<script>
(function() {
  setTimeout(() => {

    function typeWriter(elementId, speed = 40, callback) {
      const textEl = document.getElementById(elementId);
      const fullText = textEl.textContent;
      textEl.textContent = '';
      textEl.style.display = 'inline';
      textEl.style.borderRight = "2px solid #ff0000";
      let i = 0;
      function type() {
        if (i < fullText.length) {
          textEl.textContent += fullText.charAt(i);
          i++;
          setTimeout(type, speed);
        } else {
          textEl.style.borderRight = "none";
          if (callback) callback();
        }
      }
      type();
    }

    const p2 = document.getElementById('p2');
    p2.style.display = 'none';

    typeWriter('p1', 35, () => {
      p2.style.display = 'inline';
      typeWriter('p2', 25, () => {
        startCountdown(10);
      });
    });

    function startCountdown(seconds) {
      const countdownEl = document.getElementById('countdown');
      let remaining = seconds;
      countdownEl.textContent = "SYSTEM PURGE IN " + remaining + " SECONDS";

      const interval = setInterval(() => {
        remaining--;
        countdownEl.textContent = "SYSTEM PURGE IN " + remaining + " SECONDS";
        document.body.classList.add('shake-soft');
        setTimeout(() => document.body.classList.remove('shake-soft'), 400);

        if (remaining <= 0) {
          clearInterval(interval);
          countdownEl.textContent = "DISCONNECTING...";
          setTimeout(() => {
            const link = document.querySelector('#hiddenGoto tw-link');
            if (link) link.click();
          }, 800);
        }
      }, 1000);
    }

  }, 100);
})();
</script>

</article>


:: Research 1 {"position":"1150,350","size":"100,100"}
<p>Oh I can see that your AI refuses to obey to your instruction. This is very unexpected. What is wrong with it? </p>

<p> We need you to fix it as we will absolutely rely on it. Do you feel ready to accomplish such an important and historical task? </p>

[[Yes Boss, you can count on me]]


:: Yes {"position":"775,350","size":"100,100"}
<p class="typewriter" id="p1">$name is now in front of his laptop to start the work. As usual, he plans to use his own AI Model $name_ai to help and assist him throughout his studies and his works.</p>

<div class="choice-buttons launch-ai-button" style="display:none;">
  [[Launch AI]]
</div>

<script>
  
  const storyEl = document.querySelector("tw-story");
  if (storyEl) {
    storyEl.setAttribute("data-bg", "yes");
  }

  
  function typeWriter(elementId, speed = 40, callback) {
      const textEl = document.getElementById(elementId);
      const fullText = textEl.textContent;
      textEl.textContent = '';
      textEl.style.display = 'inline';
      textEl.style.borderRight = "2px solid #00bfff";

      let i = 0;
      function type() {
          if (i < fullText.length) {
              textEl.textContent += fullText.charAt(i);
              i++;
              setTimeout(type, speed);
          } else {
              textEl.style.borderRight = "none";
              if (callback) callback();
          }
      }
      type();
  }

  const choices = document.querySelector('.launch-ai-button');
  choices.style.display = 'none';

  typeWriter('p1', 35, () => {
      choices.style.display = 'flex';
  });
</script>


:: Yes Boss, you can count on me {"position":"1275,350","size":"100,100"}
<p> I need to solve this problem... I have never been confronted to such an issue with $name_ai ! I got to understand its reasoning...</p>

<p> Maybe I can find the answers to all my questions in the [[library]], on the [[net]] or perhaps in my very own [[archives]]...</p>


:: archives {"position":"1400,475","size":"100,100"}
<!-- Le joueur va trouver des informations sur sa conception (qu'il a élaboré) de l'IA, la manière avec laquelle il l'a créée -->


:: library {"position":"1400,350","size":"100,100"}



:: logique 1 {"position":"550,125","size":"100,100"}
(if:$nom_joueur is "")[(set: $nom_joueur to "jarvis")]

(go-to: "Beginning 2")


:: net {"position":"1400,225","size":"100,100"}



:: StoryStylesheet [stylesheet]
@import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@600&display=swap');

tw-story {
  position: relative;
  background-image: url("https://assetstorev1-prd-cdn.unity3d.com/package-screenshot/4e8b643b-dad5-400c-8b8b-8838a7a07968_scaled.jpg");
  background-size: cover;
  background-position: center;
  color: white;
}

tw-story::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5); 
  z-index: 0;
}

tw-passage {
  position: relative;
  z-index: 1;
}

tw-sidebar {
  display: none;
}

p {
  color: blue;
}

.Main_title {
  text-align: center;
  font-size: 60px; 
  color: #ffffff;
  text-shadow:
    0 0 5px #00bfff,
    0 0 10px #00bfff,
    0 0 20px #00bfff,
    0 0 40px #00bfff,
    0 0 80px #00bfff;
  font-family: 'Orbitron', sans-serif; 
  margin-top: 20vh; 
  letter-spacing: 2px;
}
tw-passage, p, span {
  font-family: 'Orbitron', sans-serif;
  color: #ffffff;
  text-shadow:
    0 0 3px #00bfff,
    0 0 6px #00bfff;
}

tw-dialog tw-dialog-links tw-link:nth-child(2) {
    display: none;
}
tw-dialog {
  font-family: 'Orbitron', sans-serif;
  color: #ffffff;
  text-shadow:
    0 0 3px #00bfff,
    0 0 6px #00bfff;
  background-color: rgba(0,0,0,0.8); 
  border: 2px solid #00bfff;
  border-radius: 10px;
  padding: 1em;
}

tw-dialog input[type="text"] {
  font-family: 'Orbitron', sans-serif;
  color: #ffffff;
  background-color: rgba(0,0,0,0.9);
  border: 1px solid #00bfff;
  border-radius: 5px;
  padding: 0.5em;
  width: 80%;
  text-shadow: 0 0 3px #00bfff, 0 0 6px #00bfff;
}
.typewriter {
  display: inline;        
  white-space: pre-wrap;  
  overflow: hidden;
  border-right: 2px solid #00bfff; 
}

@keyframes blinkCursor {
  0%, 49% { border-color: #00bfff; }
  50%, 100% { border-color: transparent; }
}

.cursor-blink {
  animation: blinkCursor 1s step-end infinite;
}
.choice-buttons {
  display: flex;
  justify-content: center;
  gap: 80px; 
  margin-top: 60px;
}


.choice-buttons tw-link {
  background: rgba(0, 0, 0, 0.8);
  border: 2px solid #00bfff;
  border-radius: 10px;
  padding: 12px 40px;
  color: #00bfff;
  font-family: 'Orbitron', sans-serif;
  text-shadow: 0 0 5px #00bfff, 0 0 15px #00bfff;
  font-size: 22px;
  letter-spacing: 1px;
  transition: all 0.3s ease;
  box-shadow: 0 0 10px #00bfff;
}

.choice-buttons tw-link:hover {
  background: #00bfff;
  color: #000;
  text-shadow: none;
  box-shadow: 0 0 30px #00bfff, 0 0 60px #00bfff;
  transform: scale(1.08);
}

.choice-buttons tw-link:active {
  transform: scale(0.95);
  box-shadow: 0 0 20px #0088cc inset;
}

tw-story[data-bg="yes"] {
  background-image: url("https://i.ibb.co/273PLbzq/4c7b5f52-4dac-430c-b5d6-586a3779d1d8.jpg");
  background-size: cover;
  background-position: center;
}

tw-story[data-bg="yes"]::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5); 
  z-index: 0;
}
.launch-ai-button {
  display: flex;
  justify-content: center;  
  margin-top: 200px;        
}

.launch-ai-button tw-link {
  padding: 30px 80px;       
  font-size: 34px;          
}

.barreinput input[type="text"] {
  background-color : #00bfff;
  color : black;
  
}

.barreinput {
  border :2px ;
  border-color : white;
  width: 60%;
}

article section {
  display:flex;
  align-items:center;
  flex-wrap:nowrap;
  gap: 10px;
  
}

article section section tw-link{
  display:block;
  padding:0px;
  background: rgba(0, 0, 0, 0.8);
  border: 2px solid #00bfff;
  border-radius: 10px;
  padding: 0px 10px;
  color: #00bfff;
  font-family: 'Orbitron', sans-serif;
  text-shadow: 0 0 5px #00bfff, 0 0 15px #00bfff;
  font-size: 22px;
  letter-spacing: 1px;
  transition: all 0.3s ease;
  box-shadow: 0 0 10px #00bfff;
}

article section section tw-link:hover{
  background: #00bfff;
  color: #000;
  text-shadow: none;
  box-shadow: 0 0 30px #00bfff, 0 0 60px #00bfff;
}


article{
  left:150px;
  top:300px;
}

.barreinput input[type="text"] {
  position: relative;
  width: 60%;
  padding: 12px 20px;
  font-family: 'Orbitron', sans-serif;
  font-size: 18px;
  color: #00ffff;
  background: rgba(0, 0, 0, 0.85);
  border: 2px solid #00ffff;
  border-radius: 8px;
  outline: none;
  text-shadow: 0 0 8px #00ffff, 0 0 12px #00bfff;
  box-shadow: 0 0 10px #00ffff, inset 0 0 15px #002244;
  transition: all 0.3s ease-in-out;
  animation: glowPulse 2.5s infinite ease-in-out;
}


@keyframes glowPulse {
  0%, 100% {
    box-shadow: 0 0 10px #00ffff, inset 0 0 15px #002244;
  }
  50% {
    box-shadow: 0 0 25px #00ffff, inset 0 0 25px #003355;
  }
}


.barreinput input[type="text"]:focus {
  background: rgba(0, 50, 70, 0.9);
  border-color: #00bfff;
  box-shadow: 0 0 25px #00bfff, inset 0 0 25px #004466;
  transform: scale(1.03);
}


.barreinput input[type="text"]::before {
  content: "";
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    120deg,
    transparent,
    rgba(0, 255, 255, 0.2),
    transparent
  );
  animation: scan 3s infinite linear;
}

@keyframes scan {
  0% { left: -100%; }
  50% { left: 100%; }
  100% { left: 100%; }
}

.virus-takeover {
  position: fixed;
  top: 0; left: 0;
  width: 120vw;  
  height: 120vh; 
  margin: -10vh -10vw; 
  background: black;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  color: red;
  font-family: 'Orbitron', sans-serif;
  z-index: 9999;
  text-align: center;
  overflow: hidden;
}

.red {
  color: red;
  text-shadow: 0 0 10px red, 0 0 20px red;
}

.countdown {
  font-size: 2em;
  margin-top: 40px;
  animation: pulse 1s infinite;
}

@keyframes pulse {
  0%, 100% { text-shadow: 0 0 10px red; }
  50% { text-shadow: 0 0 25px #ff0000, 0 0 50px #ff0000; }
}


@keyframes shake-soft {
  0%, 100% { transform: translate(0, 0); }
  25% { transform: translate(-3px, 3px); }
  50% { transform: translate(3px, -3px); }
  75% { transform: translate(-2px, 2px); }
}

body.shake-soft {
  animation: shake-soft 0.5s ease-in-out;
}
