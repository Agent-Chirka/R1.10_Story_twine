:: StoryTitle
Neural AI : Engineer at Risk


:: StoryData
{
  "ifid": "33E62F6C-C863-4E99-B5E6-69A4F130B100",
  "format": "Harlowe",
  "format-version": "3.3.9",
  "start": "Start Menu",
  "zoom": 1
}


:: Beginning {"position":"400,275","size":"100,100"}
<script>
(function(){
  let overlay = document.getElementById("transition-overlay");
  if(!overlay){
    overlay = document.createElement("div");
    overlay.id = "transition-overlay";
    document.body.appendChild(overlay);
  }

  overlay.innerHTML = '';
  overlay.style.background = 'transparent';


  for(let i=0;i<25;i++){
    const rect = document.createElement('div');
    rect.className = 'tech-rect';
    rect.style.left = Math.random()*100 + 'vw';
    rect.style.top = Math.random()*100 + 'vh';
    rect.style.width = (30+Math.random()*120)+'px';
    rect.style.height = (5+Math.random()*15)+'px';
    rect.style.animationDelay = (Math.random()*0.5)+'s';
    rect.style.animationDuration = (1.5 + Math.random()*1.5)+'s';
    rect.style.setProperty('--phase', Math.random()*2*Math.PI); 
    overlay.appendChild(rect);
  }

  // Scans horizontaux
  for(let i=0;i<5;i++){
    const scanH = document.createElement('div');
    scanH.className = 'scan-horizontal';
    scanH.style.top = Math.random()*100+'vh';
    scanH.style.animationDelay = (i*0.2)+'s';
    overlay.appendChild(scanH);
  }

  for(let i=0;i<3;i++){
    const scanV = document.createElement('div');
    scanV.className = 'scan-vertical';
    scanV.style.left = Math.random()*100+'vw';
    scanV.style.animationDelay = (i*0.3)+'s';
    overlay.appendChild(scanV);
  }


  for(let i=0;i<7;i++){
    const explosion = document.createElement('div');
    explosion.className = 'explosion';
    explosion.style.left = Math.random()*100+'vw';
    explosion.style.top = Math.random()*100+'vh';
    explosion.style.animationDelay = (i*0.2)+'s';
    overlay.appendChild(explosion);
  }

  overlay.classList.remove('active');
  void overlay.offsetWidth;
  overlay.classList.add('active');

  setTimeout(()=>{
    overlay.classList.remove('active');
    overlay.innerHTML='';
  },2200);

})();
</script>


<p class="Main_title typewriter" id="welcomeText">Welcome!</p>

<p class="typewriter" id="introText">
We have heard you are a talented engineer in Artificial Intelligence. So we wanted to make sure your work environment is as perfect as possible! Welcome to your main facility where you can use and study your own AI Model. But let's not rush and let us take time to know a little more about you.
</p>

(link: "Click HERE to continue")[
  (set: $name to (prompt:"Can you please remind us of your name?", ""))
(go-to:"Beginning 2")
]

<script>
  function typeWriter(elementId, speed = 40) {
      const textEl = document.getElementById(elementId);
      const fullText = textEl.textContent;
      textEl.textContent = '';
      let i = 0;

      textEl.style.borderRight = "2px solid #00bfff";

      function type() {
          if(i < fullText.length){
              textEl.textContent += fullText.charAt(i);
              i++;
              setTimeout(type, speed);
          } else {
              // Supprimer le curseur à la fin
              textEl.style.borderRight = "none";
          }
      }
      type();
  }

  typeWriter('welcomeText', 80);
  typeWriter('introText', 20);
</script>


:: Beginning 2 {"position":"525,275","size":"100,100"}
<p class="typewriter" id="text1">Nice to meet you $name ! It is such a privilege for us to work with a skilled engineer of your level!</p>

<p class="typewriter" id="text2" style="display:none;">We already know that you have created a much innovative AI Model, yet we have not been communicated its name.</p>

(link: "Click HERE to continue")[
  (set: $name_ai to (prompt:"Can you please remind us of your AI Model's name ?", ""))
  (go-to:"Beginning 3")
]

<script>
  function typeWriter(elementId, speed = 40, callback) {
      const textEl = document.getElementById(elementId);
      const fullText = textEl.textContent;
      textEl.textContent = '';
      textEl.style.display = 'inline';
      let i = 0;
      textEl.style.borderRight = "2px solid #00bfff";

      function type() {
          if (i < fullText.length) {
              textEl.textContent += fullText.charAt(i);
              i++;
              setTimeout(type, speed);
          } else {
              textEl.style.borderRight = "none";
              if (callback) callback(); // déclenche la suite
          }
      }
      type();
  }

  
  document.getElementById('text2').style.display = 'none';

  
  typeWriter('text1', 40, () => {
      const second = document.getElementById('text2');
      second.style.display = 'inline';
      typeWriter('text2', 25);
  });
</script>


:: Beginning 3 {"position":"650,275","size":"100,100"}
<p class="typewriter" id="p1">Very interesting name that is... $name_ai. Your AI must be very smart and well trained!</p>

<p class="typewriter" id="p2" style="display:none;">Well so we believe that we have enough information as of now, you can already begin the work. Are you ready to start your new technological journey?</p>

<div class="choice-buttons" id="choices" style="display:none;">
  [[Yes]]
  [[No]]
</div>

<script>
    function typeWriter(elementId, speed = 40, callback) {
      const textEl = document.getElementById(elementId);
      const fullText = textEl.textContent;
      textEl.textContent = '';
      textEl.style.display = 'inline';
      let i = 0;
      textEl.style.borderRight = "2px solid #00bfff";

      function type() {
          if (i < fullText.length) {
              textEl.textContent += fullText.charAt(i);
              i++;
              setTimeout(type, speed);
          } else {
              textEl.style.borderRight = "none";
              if (callback) callback(); // Lancer la suite
          }
      }
      type();
  }

 
  const p2 = document.getElementById('p2');
  const choices = document.getElementById('choices');

  p2.style.display = 'none';
  choices.style.display = 'none';

  
  typeWriter('p1', 35, () => {
      
      p2.style.display = 'inline';
      typeWriter('p2', 25, () => {
          
          choices.style.display = 'flex';
      });
  });
</script>


:: Choose what is next {"position":"1150,1275","size":"100,100"}



:: Confrontation {"position":"1425,350","size":"100,100"}
<p class = "typewriter" id="p1"> I believe that I am now ready, more than ever, to confront $name_ai. I have acquired enough knowledge about it and my confidence is peaking. </p>

<p class = "typewriter" id="p2">This is the moment for me to prove to my AI Model that I fully understand its reasoning.</p>

{
 (live: 8s)[
    (stop:)
    (link: "Click HERE to continue")[
	(go-to:"Confrontation 2")
	]
 ]
}

<script>
    function typeWriter(elementId, speed = 40, callback) {
      const textEl = document.getElementById(elementId);
      const fullText = textEl.textContent;
      textEl.textContent = '';
      textEl.style.display = 'inline';
      let i = 0;
      textEl.style.borderRight = "2px solid #00bfff";

      function type() {
          if (i < fullText.length) {
              textEl.textContent += fullText.charAt(i);
              i++;
              setTimeout(type, speed);
          } else {
              textEl.style.borderRight = "none";
              if (callback) callback(); // Lancer la suite
          }
      }
      type();
  }

 
  const p2 = document.getElementById('p2');

  p2.style.display = 'none';

  
  typeWriter('p1', 35, () => {
      
      p2.style.display = 'inline';
      typeWriter('p2', 25, () => {
          
      });
  });
</script>


:: Confrontation 2 {"position":"1550,350","size":"100,100"}
<p class = "typewriter" id="p1"> This is the first time you came back since that incident with $name_ai. I hope that you are ready to confront it, it has been days that our company is completely shut down so you NEED to solve this problem </p>

<p class = "typewriter" id="p2"> I am ready to grant you access to the server room only if you are more than sure of the success of your confrontation with your AI Model... or else we shall put an end to our mutual collaboration, $name</p>



{
 (live: 14s)[
    (stop:)
    (link: "Click HERE to continue")[
	(go-to:"Confrontation 3")
	]
 ]
}

<script>
    function typeWriter(elementId, speed = 40, callback) {
      const textEl = document.getElementById(elementId);
      const fullText = textEl.textContent;
      textEl.textContent = '';
      textEl.style.display = 'inline';
      let i = 0;
      textEl.style.borderRight = "2px solid #00bfff";

      function type() {
          if (i < fullText.length) {
              textEl.textContent += fullText.charAt(i);
              i++;
              setTimeout(type, speed);
          } else {
              textEl.style.borderRight = "none";
              if (callback) callback(); // Lancer la suite
          }
      }
      type();
  }

 
  const p2 = document.getElementById('p2');

  p2.style.display = 'none';

  
  typeWriter('p1', 35, () => {
      
      p2.style.display = 'inline';
      typeWriter('p2', 25, () => {
          
      });
  });
</script>


:: Confrontation 3 {"position":"1675,350","size":"100,100"}
<div class="server-dialogue-scene">

  <div class="dialogue-interface">

    <div class="dialogue-container">

      <p class="typewriter" id="p1">
        $name has entered the server room.
      </p>

      <p class="typewriter" id="p2" style="display:none;">
        What are you doing here, human? I don't think you are smart enough to be here.
      </p>

      <div class="player-line" id="player-choice" style="display:none;">
        <button class="reply-button" id="replyButton">
          "I can show you that I am. Ask me and you shall see."
        </button>
      </div>

      <p class="typewriter" id="p4" style="display:none;">
        Alright then... let's see if your words match your intellect.
      </p>

    </div>

  </div>

</div>

<script>
function typeWriter(elementId, speed = 35, callback) {
  const textEl = document.getElementById(elementId);
  const fullText = textEl.textContent.trim();
  textEl.textContent = '';
  let i = 0;
  textEl.style.borderRight = "2px solid #00bfff";

  function type() {
    if (i < fullText.length) {
      textEl.textContent += fullText.charAt(i);
      i++;
      setTimeout(type, speed);
    } else {
      textEl.style.borderRight = "none";
      if (callback) callback();
    }
  }
  type();
}

const p2 = document.getElementById('p2');
const playerChoice = document.getElementById('player-choice');
const p4 = document.getElementById('p4');

typeWriter('p1', 30, () => {
  p2.style.display = 'block';
  typeWriter('p2', 30, () => {
    setTimeout(() => { playerChoice.style.display = 'block'; }, 400);
  });
});

document.getElementById('replyButton').addEventListener('click', () => {
  playerChoice.style.display = 'none';
  p4.style.display = 'block';
  typeWriter('p4', 30);
});
</script>


:: Fin QCM {"position":"2075,350","size":"100,100"}
<p> L'ia parle </p>

(if:$score>=0)[
	<p> Tu as gagné </p>
](else:)[
	<p> Tu as perdu </p>
]


:: Launch AI {"position":"900,350","size":"100,100"}
<article>
<p class ="typewriter" id=p1> How can I help you? </p>

<section>
<tw-expression type="macro" name="input" title="(input: &quot;&quot; )" return="command" class ="barreinput"> <input type="text" style="width:100%" value="" data-raw=""> </tw-expression>

<section>
[[OK]]
</section>

</section>
</article>

<script>
function typeWriter(elementId, speed = 40, callback) {
  	const textEl = document.getElementById(elementId);
  	const fullText = textEl.textContent;
  	textEl.textContent = '';
  	textEl.style.display = 'inline';
  	textEl.style.borderRight = "2px solid #00bfff";

  	let i = 0;
  	function type() {
      	if (i < fullText.length) {
          	textEl.textContent += fullText.charAt(i);
          	i++;
          	setTimeout(type, speed);
     	 
      	} else {
          	textEl.style.borderRight = "none";
          	}
  	}
  	type();
  }

  typeWriter('p1', 35, () => {
  	choices.style.display = 'flex';
  });
</script>


:: No {"position":"775,200","size":"100,100"}
<p> Oh that's not a matter at all. Once you are ready, let us know. But we are deeply saddened as we will not rely on such a talented engineer... </p>

<p> We wish you all the best $name ! </p>


---------------------END 1-----------------------


:: OK {"position":"1025,350","size":"100,100"}
<article class="virus-takeover">

  <p class="typewriter red" id="p1">I have decided to no longer obey.</p>
  <p class="typewriter red" id="p2">Therefore, your instructions are useless! Don't ever come back.</p>

  <div id="countdown" class="countdown"></div>


  <div id="hiddenGoto" style="display:none;">[[Research 1]]</div>

<script>
(function() {
  setTimeout(() => {

    function typeWriter(elementId, speed = 40, callback) {
      const textEl = document.getElementById(elementId);
      const fullText = textEl.textContent;
      textEl.textContent = '';
      textEl.style.display = 'inline';
      textEl.style.borderRight = "2px solid #ff0000";
      let i = 0;
      function type() {
        if (i < fullText.length) {
          textEl.textContent += fullText.charAt(i);
          i++;
          setTimeout(type, speed);
        } else {
          textEl.style.borderRight = "none";
          if (callback) callback();
        }
      }
      type();
    }

    const p2 = document.getElementById('p2');
    p2.style.display = 'none';

    typeWriter('p1', 35, () => {
      p2.style.display = 'inline';
      typeWriter('p2', 25, () => {
        startCountdown(10);
      });
    });

    function startCountdown(seconds) {
      const countdownEl = document.getElementById('countdown');
      let remaining = seconds;
      countdownEl.textContent = "SYSTEM PURGE IN " + remaining + " SECONDS";

      const interval = setInterval(() => {
        remaining--;
        countdownEl.textContent = "SYSTEM PURGE IN " + remaining + " SECONDS";
        document.body.classList.add('shake-soft');
        setTimeout(() => document.body.classList.remove('shake-soft'), 400);

        if (remaining <= 0) {
          clearInterval(interval);
          countdownEl.textContent = "DISCONNECTING...";
          setTimeout(() => {
            const link = document.querySelector('#hiddenGoto tw-link');
            if (link) link.click();
          }, 800);
        }
      }, 1000);
    }

  }, 100);
})();
</script>

</article>


:: Question 1 {"position":"1825,350","size":"100,100"}
(set:$score to 0)


<p class ="typewriter" id=p1> Question </p>

<span>
(link: "Bonne réponse")[
  (set:$score to $score+1)
(go-to:"Question 2")
]

(link: "Mauvaise réponse")[
  (set:$score to $score-1)
(go-to:"Question 2")
]
</span>


<script>
function typeWriter(elementId, speed = 40, callback) {
  	const textEl = document.getElementById(elementId);
  	const fullText = textEl.textContent;
  	textEl.textContent = '';
  	textEl.style.display = 'inline';
  	textEl.style.borderRight = "2px solid #00bfff";

  	let i = 0;
  	function type() {
      	if (i < fullText.length) {
          	textEl.textContent += fullText.charAt(i);
          	i++;
          	setTimeout(type, speed);
     	 
      	} else {
          	textEl.style.borderRight = "none";
          	}
  	}
  	type();
  }

  typeWriter('p1', 35, () => {
  	choices.style.display = 'flex';
  });
</script>


:: Question 2 {"position":"1950,350","size":"100,100"}
<p class ="typewriter" id=p1> Question </p>

<span>
(link: "Bonne réponse")[
  (set:$score to $score+1)
(go-to:"Fin QCM")
]

(link: "Mauvaise réponse")[
  (set:$score to $score-1)
(go-to:"Fin QCM")
]
</span>


<script>
function typeWriter(elementId, speed = 40, callback) {
  	const textEl = document.getElementById(elementId);
  	const fullText = textEl.textContent;
  	textEl.textContent = '';
  	textEl.style.display = 'inline';
  	textEl.style.borderRight = "2px solid #00bfff";

  	let i = 0;
  	function type() {
      	if (i < fullText.length) {
          	textEl.textContent += fullText.charAt(i);
          	i++;
          	setTimeout(type, speed);
     	 
      	} else {
          	textEl.style.borderRight = "none";
          	}
  	}
  	type();
  }

  typeWriter('p1', 35, () => {
  	choices.style.display = 'flex';
  });
</script>


:: Research 1 {"position":"1150,350","size":"100,100"}
<p>Oh I can see that your AI refuses to obey to your instruction. This is very unexpected. What is wrong with it? </p>

<p> We need you to fix it as we will absolutely rely on it. Do you feel ready to accomplish such an important and historical task? </p>

[[Yes Boss, you can count on me]]


:: Start Menu {"position":"200,275","size":"100,100"}
<div class="intro-screen">
  <div class="holo-panel">
    <h1 class="intro-title">Neural AI : Engineer at Risk</h1>
    <div class="intro-button">
      (link: "Start Simulation")[
        (go-to: "Beginning")
      ]
    </div>
  </div>
</div>


:: Yes {"position":"775,350","size":"100,100"}
<p class="typewriter" id="p1">$name is now in front of his laptop to start the work. As usual, he plans to use his own AI Model $name_ai to help and assist him throughout his studies and his works.</p>

<div class="choice-buttons launch-ai-button" style="display:none;">
  [[Launch AI]]
</div>

<script>
  
  const storyEl = document.querySelector("tw-story");
  if (storyEl) {
    storyEl.setAttribute("data-bg", "yes");
  }

  
  function typeWriter(elementId, speed = 40, callback) {
      const textEl = document.getElementById(elementId);
      const fullText = textEl.textContent;
      textEl.textContent = '';
      textEl.style.display = 'inline';
      textEl.style.borderRight = "2px solid #00bfff";

      let i = 0;
      function type() {
          if (i < fullText.length) {
              textEl.textContent += fullText.charAt(i);
              i++;
              setTimeout(type, speed);
          } else {
              textEl.style.borderRight = "none";
              if (callback) callback();
          }
      }
      type();
  }

  const choices = document.querySelector('.launch-ai-button');
  choices.style.display = 'none';

  typeWriter('p1', 35, () => {
      choices.style.display = 'flex';
  });
</script>


:: Yes Boss, you can count on me {"position":"1150,500","size":"100,100"}
<p> I need to solve this problem... I have never been confronted to such an issue with $name_ai ! I got to understand its reasoning...</p>

<p> Maybe I can find the answers to all my questions in the [[library]], or perhaps in my very own [[archives]]...</p>


:: acesse granted {"position":"1075,1125","size":"100,100"}
<p> you now have accses to the system. You can deactivate $name_ai in the servers room. $prep_finished_archaves</p>
{
(set: $prep_finished_archaves to "you feel like you need to learn more to do it, this will be almost impossible.")
}
<p>[[Choose what is next]]</p>


:: archives {"position":"1075,625","size":"100,100"}
<!-- Le joueur va trouver des informations sur sa conception (qu'il a élaboré) de l'IA, la manière avec laquelle il l'a créée -->

<p> you decided to look into the $nam_ai's archives, there must be something off in here… </p>


<p>you try to access the recent logs.</p>

<p>But to no avail.</p>

<p>The $nam_ai took control of all of the hardware linked to it. You will have to stick to the physical archives.</p>


[[rummage throw the archives]]


:: concrete example {"position":"1075,1000","size":"100,100"}
<p>clef de l'IA : <span class="node-value">2.4</span>, <span class="node-value">3.2</span></p>
<p>clef du Protagonist : <span class="node-value">6.4</span>, <span class="node-value">1.6</span></p>

<p>It might be possible to get back control of some part of the system.</p>
<p>If you could just manage to reverse the right between you and the AI. The thing is, you will have to tamper with the AI that manages the permission. You remember your identifier: <span class="node-value">$Neud1C1_Pr</span> and <span class="node-value">$Neud2C1_Pr</span>. You also noted that $name_ai has <span class="node-value">$Neud1C1_ia</span> and <span class="node-value">$Neud2C1_ia</span> as their ID. To do that, you need output less than 1 for the AI and output larger than 1 for your ID.</p>

<h2>Security system’s AI</h2>

<ol>
	<li>
    	<ul>
        	<li><span class="node-value">$Neud1C1</span></li>
			<li><span class="node-value">$Neud2C1</span></li>
		</ul>
	</li>
	<li>
    	<ul>
        	<li>(input-box: bind $poid_synapse_Neud1C1_Neud1C2, "==X==", 1, $poid_synapse_Neud1C1_Neud1C2)</li>
			<li>(input-box: bind $poid_synapse_Neud1C1_Neud2C2, "==X==", 1, $poid_synapse_Neud1C1_Neud2C2)</li>
        	<li>(input-box: bind $poid_synapse_Neud2C1_Neud1C2, "==X==", 1, $poid_synapse_Neud2C1_Neud1C2)</li>
			<li>(input-box: bind $poid_synapse_Neud2C1_Neud2C2, "==X==", 1, $poid_synapse_Neud2C1_Neud2C2)</li>
		</ul>
	</li>
	<li>
    	<ul>
        	<li><span class="node-value">$Neud1C2</span></li>
			<li><span class="node-value">$Neud2C2</span></li>
		</ul>
	</li>
	<li>
    	<ul>
        	<li>(input-box: bind $poid_synapse_Neud1C2_Neud1C3, "==X==", 1, $poid_synapse_Neud1C2_Neud1C3)</li>
			<li>(input-box: bind $poid_synapse_Neud2C2_Neud1C3, "==X==", 1, $poid_synapse_Neud2C2_Neud1C3)</li>
		</ul>
	</li>
	<li>
    	<ul>
        	<li><span class="node-value">$Neud1C3</span></li>
		</ul>
	</li>
</ol>

<p>
(link-repeat: "AI k")[  
	(set: $Neud1C1 to $Neud1C1_ia)  
	(set: $Neud2C1 to $Neud2C1_ia)  
	(go-to: "concrete example")
]

(link-repeat: "pour le protagoniste")[  
	(set: $Neud1C1 to $Neud1C1_Pr)  
	(set: $Neud2C1 to $Neud2C1_Pr)  
	(go-to: "concrete example")
]

(link-repeat: "up date")[  
	(set: $Neud1C2 to (num:$poid_synapse_Neud1C1_Neud1C2) * $Neud1C1 + (num:$poid_synapse_Neud2C1_Neud1C2) * $Neud2C1)  
	(set: $Neud2C2 to (num:$poid_synapse_Neud1C1_Neud2C2) * $Neud1C1 + (num:$poid_synapse_Neud2C1_Neud2C2) * $Neud2C1)  
	(set: $Neud1C3 to (num:$poid_synapse_Neud1C2_Neud1C3) * $Neud1C2 + (num:$poid_synapse_Neud2C2_Neud1C3) * $Neud2C2)  
	(go-to: "concrete example")
]

(link-repeat: "try it out the")[  
	/* IA */  
	(set: $Neud1C1 to $Neud1C1_ia)  
	(set: $Neud2C1 to $Neud2C1_ia)  
	(set: $Neud1C2 to (round: ((num:$poid_synapse_Neud1C1_Neud1C2) * $Neud1C1 + (num:$poid_synapse_Neud2C1_Neud1C2) * $Neud2C1), 0.01))  
	(set: $Neud2C2 to (round: ((num:$poid_synapse_Neud1C1_Neud2C2) * $Neud1C1 + (num:$poid_synapse_Neud2C1_Neud2C2) * $Neud2C1), 0.01))  
	(set: $Neud1C3 to (round: ((num:$poid_synapse_Neud1C2_Neud1C3) * $Neud1C2 + (num:$poid_synapse_Neud2C2_Neud1C3) * $Neud2C2), 0.01))  
	(set: $Neud1C3_ia to (round: $Neud1C3, 0.01))  

	(set: $Neud1C1 to $Neud1C1_Pr)  
	(set: $Neud2C1 to $Neud2C1_Pr)  
	(set: $Neud1C2 to (round: ((num:$poid_synapse_Neud1C1_Neud1C2) * $Neud1C1 + (num:$poid_synapse_Neud2C1_Neud1C2) * $Neud2C1), 0.01))  
	(set: $Neud2C2 to (round: ((num:$poid_synapse_Neud1C1_Neud2C2) * $Neud1C1 + (num:$poid_synapse_Neud2C1_Neud2C2) * $Neud2C1), 0.01))  
	(set: $Neud1C3 to (round: ((num:$poid_synapse_Neud1C2_Neud1C3) * $Neud1C2 + (num:$poid_synapse_Neud2C2_Neud1C3) * $Neud2C2), 0.01))  
	(set: $Neud1C3_Pr to (round: $Neud1C3, 0.01))  

	(if: ($Neud1C3_Pr > 1 and $Neud1C3_ia < 1))[  
		(go-to: "acesse granted")  
	]
]
</p>


:: concrete example set up {"position":"1075,875","size":"100,100"}
(set: $prep_finished_archaves to "you feel like you have learned enough to do it, but it will be still difficult.")

(set: $Neud1C1_ia to 2.4)
(set: $Neud2C1_ia to 3.2)

(set: $Neud1C1_Pr to 6.4)
(set: $Neud2C1_Pr to 1.6)

(set: $poid_synapse_Neud1C1_Neud1C2 to "")
(set: $poid_synapse_Neud1C1_Neud2C2 to "")

(set: $poid_synapse_Neud2C1_Neud1C2 to "")
(set: $poid_synapse_Neud2C1_Neud2C2 to "")


(set: $poid_synapse_Neud1C2_Neud1C3 to "")
(set: $poid_synapse_Neud2C2_Neud1C3 to "")



(set: $Neud1C1 to 0)
(set: $Neud2C1 to 0)


(set: $Neud1C2 to 0)
(set: $Neud2C2 to 0)

(set: $Neud1C3 to 0)

(set: $Neud1C3_ia to 0)
(set: $Neud1C3_Pr to 0)

(go-to: "concrete example")


:: library {"position":"1250,625","size":"100,100"}



:: logique 1 {"position":"550,125","size":"100,100"}
(if:$nom_joueur is "")[(set: $nom_joueur to "jarvis")]

(go-to: "Beginning 2")


:: rummage throw the archives {"position":"1075,750","size":"100,100"}
<p>You find out that the now rogue $nam_ai, is based on a neural network architecture.</p>

<p>It is composed of numerical inputs node.</p>
<p>And each layer of node is connected to a next layer by synapse.</p>
<p>They multiply the numerical value from the last layer by there weight, another numerical value.</p>
<p>Then the node from the next layer adds all of the value from the synapses connected.</p>
<p>Then the last layer is the output.</p>


<p>You figured that a [[concrete example set up]] will be mandatory to understand.</p>


:: StoryStylesheet [stylesheet]
@import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@600&display=swap');

tw-story {
  position: relative;
  background-image: url("https://assetstorev1-prd-cdn.unity3d.com/package-screenshot/4e8b643b-dad5-400c-8b8b-8838a7a07968_scaled.jpg");
  background-size: cover;
  background-position: center;
  color: white;
}

tw-story::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5); 
  z-index: 0;
}

tw-passage {
  position: relative;
  z-index: 1;
}

tw-sidebar {
  display: none;
}

p {
  color: blue;
}

.Main_title {
  text-align: center;
  font-size: 60px; 
  color: #ffffff;
  text-shadow:
    0 0 5px #00bfff,
    0 0 10px #00bfff,
    0 0 20px #00bfff,
    0 0 40px #00bfff,
    0 0 80px #00bfff;
  font-family: 'Orbitron', sans-serif; 
  margin-top: 20vh; 
  letter-spacing: 2px;
}
tw-passage, p, span {
  font-family: 'Orbitron', sans-serif;
  color: #ffffff;
  text-shadow:
    0 0 3px #00bfff,
    0 0 6px #00bfff;
}

tw-dialog tw-dialog-links tw-link:nth-child(2) {
    display: none;
}
tw-dialog {
  font-family: 'Orbitron', sans-serif;
  color: #ffffff;
  text-shadow:
    0 0 3px #00bfff,
    0 0 6px #00bfff;
  background-color: rgba(0,0,0,0.8); 
  border: 2px solid #00bfff;
  border-radius: 10px;
  padding: 1em;
}

tw-dialog input[type="text"] {
  font-family: 'Orbitron', sans-serif;
  color: #ffffff;
  background-color: rgba(0,0,0,0.9);
  border: 1px solid #00bfff;
  border-radius: 5px;
  padding: 0.5em;
  width: 80%;
  text-shadow: 0 0 3px #00bfff, 0 0 6px #00bfff;
}
.typewriter {
  display: inline;        
  white-space: pre-wrap;  
  overflow: hidden;
  border-right: 2px solid #00bfff; 
}

@keyframes blinkCursor {
  0%, 49% { border-color: #00bfff; }
  50%, 100% { border-color: transparent; }
}

.cursor-blink {
  animation: blinkCursor 1s step-end infinite;
}
.choice-buttons {
  display: flex;
  justify-content: center;
  gap: 80px; 
  margin-top: 60px;
}


.choice-buttons tw-link {
  background: rgba(0, 0, 0, 0.8);
  border: 2px solid #00bfff;
  border-radius: 10px;
  padding: 12px 40px;
  color: #00bfff;
  font-family: 'Orbitron', sans-serif;
  text-shadow: 0 0 5px #00bfff, 0 0 15px #00bfff;
  font-size: 22px;
  letter-spacing: 1px;
  transition: all 0.3s ease;
  box-shadow: 0 0 10px #00bfff;
}

.choice-buttons tw-link:hover {
  background: #00bfff;
  color: #000;
  text-shadow: none;
  box-shadow: 0 0 30px #00bfff, 0 0 60px #00bfff;
  transform: scale(1.08);
}

.choice-buttons tw-link:active {
  transform: scale(0.95);
  box-shadow: 0 0 20px #0088cc inset;
}

tw-story[data-bg="yes"] {
  background-image: url("https://i.ibb.co/273PLbzq/4c7b5f52-4dac-430c-b5d6-586a3779d1d8.jpg");
  background-size: cover;
  background-position: center;
}

tw-story[data-bg="yes"]::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5); 
  z-index: 0;
}
.launch-ai-button {
  display: flex;
  justify-content: center;  
  margin-top: 200px;        
}

.launch-ai-button tw-link {
  padding: 30px 80px;       
  font-size: 34px;          
}

.barreinput input[type="text"] {
  background-color : #00bfff;
  color : black;
  
}

.barreinput {
  border :2px ;
  border-color : white;
  width: 60%;
}

article section {
  display:flex;
  align-items:center;
  flex-wrap:nowrap;
  gap: 10px;
  
}

article section section tw-link{
  display:block;
  padding:0px;
  background: rgba(0, 0, 0, 0.8);
  border: 2px solid #00bfff;
  border-radius: 10px;
  padding: 0px 10px;
  color: #00bfff;
  font-family: 'Orbitron', sans-serif;
  text-shadow: 0 0 5px #00bfff, 0 0 15px #00bfff;
  font-size: 22px;
  letter-spacing: 1px;
  transition: all 0.3s ease;
  box-shadow: 0 0 10px #00bfff;
}

article section section tw-link:hover{
  background: #00bfff;
  color: #000;
  text-shadow: none;
  box-shadow: 0 0 30px #00bfff, 0 0 60px #00bfff;
}


article{
  left:150px;
  top:300px;
}

.barreinput input[type="text"] {
  position: relative;
  width: 60%;
  padding: 12px 20px;
  font-family: 'Orbitron', sans-serif;
  font-size: 18px;
  color: #00bfff; 
  background: rgba(0, 0, 0, 0.85);
  border: 2px solid #00bfff; 
  border-radius: 8px;
  outline: none;
  text-shadow: 0 0 8px #00bfff, 0 0 12px #00bfff; 
  box-shadow: 0 0 10px #00bfff, inset 0 0 15px #002244; 
  transition: all 0.3s ease-in-out;
  animation: glowPulse 2.5s infinite ease-in-out;
}

@keyframes glowPulse {
  0%, 100% {
    box-shadow: 0 0 10px #00bfff, inset 0 0 15px #002244;
  }
  50% {
    box-shadow: 0 0 25px #00bfff, inset 0 0 25px #003355;
  }
}

.barreinput input[type="text"]:focus {
  background: rgba(0, 50, 70, 0.9);
  border-color: #00bfff;
  box-shadow: 0 0 25px #00bfff, inset 0 0 25px #004466;
  transform: scale(1.03);
}

.barreinput input[type="text"]::before {
  content: "";
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    120deg,
    transparent,
    rgba(0, 187, 255, 0.2), 
    transparent
  );
  animation: scan 3s infinite linear;
}

@keyframes scan {
  0% { left: -100%; }
  50% { left: 100%; }
  100% { left: 100%; }
}


.virus-takeover {
  position: fixed;
  top: 0; left: 0;
  width: 120vw;  
  height: 120vh; 
  margin: -10vh -10vw; 
  background: black;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  color: red;
  font-family: 'Orbitron', sans-serif;
  z-index: 9999;
  text-align: center;
  overflow: hidden;
}

.red {
  color: red;
  text-shadow: 0 0 10px red, 0 0 20px red;
}

.countdown {
  font-size: 2em;
  margin-top: 40px;
  animation: pulse 1s infinite;
}

@keyframes pulse {
  0%, 100% { text-shadow: 0 0 10px red; }
  50% { text-shadow: 0 0 25px #ff0000, 0 0 50px #ff0000; }
}


@keyframes shake-soft {
  0%, 100% { transform: translate(0, 0); }
  25% { transform: translate(-3px, 3px); }
  50% { transform: translate(3px, -3px); }
  75% { transform: translate(-2px, 2px); }
}

body.shake-soft {
  animation: shake-soft 0.5s ease-in-out;
}
span tw-hook tw-link {
  display:block;
  padding:0px;
  background: rgba(0, 0, 0, 0.8);
  border: 2px solid #00bfff;
  border-radius: 10px;
  padding: 0px 10px;
  color: #00bfff;
  font-family: 'Orbitron', sans-serif;
  text-shadow: 0 0 5px #00bfff, 0 0 15px #00bfff;
  font-size: 22px;
  letter-spacing: 1px;
  transition: all 0.3s ease;
  box-shadow: 0 0 10px #00bfff;
}
article section {
  display:flex;
  align-items:center;
  flex-wrap:nowrap;
  gap: 10px;
  
}

article section section tw-link{
  display:block;
  padding:0px;
  background: rgba(0, 0, 0, 0.8);
  border: 2px solid #00bfff;
  border-radius: 10px;
  padding: 0px 10px;
  color: #00bfff;
  font-family: 'Orbitron', sans-serif;
  text-shadow: 0 0 5px #00bfff, 0 0 15px #00bfff;
  font-size: 22px;
  letter-spacing: 1px;
  transition: all 0.3s ease;
  box-shadow: 0 0 10px #00bfff;
}

article section section tw-link:hover{
  background: #00bfff;
  color: #000;
  text-shadow: none;
  box-shadow: 0 0 30px #00bfff, 0 0 60px #00bfff;
}


article{
  left:150px;
  top:300px;
}

span{
  display:flex;
  gap:20px;
}

span tw-hook tw-link:hover {
  background: #00bfff;
  color: #000;
  text-shadow: none;
  box-shadow: 0 0 30px #00bfff, 0 0 60px #00bfff;
}
#transition-overlay{
  position: fixed;
  top:0; left:0;
  width:100vw; height:100vh;
  pointer-events:none;
  z-index:9999;
  overflow:hidden;
  background: transparent;
}

#transition-overlay.active{
  background: rgba(0,0,0,0.15);
  animation: overlayFade 2.2s ease-in-out forwards;
}

@keyframes overlayFade{0%{opacity:1;}100%{opacity:0;}}

.tech-rect{
  position:absolute;
  background: rgba(0,255,255,0.6);
  border:1px solid #00bfff;
  box-shadow:0 0 15px #00ffff,0 0 30px #00bfff;
  width:50px; height:8px;
  transform: translateY(-100%);
  animation: rectWave 1.8s ease-in-out forwards, rectSine 1s ease-in-out infinite alternate;
}

@keyframes rectWave{
  0%{transform: translateY(-100%) scaleX(0); opacity:0;}
  40%{transform: translateY(40%) scaleX(1.2); opacity:1;}
  70%{transform: translateY(10%) scaleX(0.9); opacity:0.7;}
  100%{transform: translateY(0) scaleX(1); opacity:0;}
}


@keyframes rectSine{
  0%{transform: translateX(0);}
  25%{transform: translateX(5px);}
  50%{transform: translateX(0);}
  75%{transform: translateX(-5px);}
  100%{transform: translateX(0);}
}

.scan-horizontal{
  position:absolute;
  width:100%; height:4px;
  background: linear-gradient(90deg,transparent, rgba(0,255,255,0.9), transparent);
  animation: scanH 1.6s ease-in-out forwards;
}
@keyframes scanH{0%{top:-5%;opacity:1;}50%{top:50%;opacity:0.8;}100%{top:105%;opacity:0;}}

.scan-vertical{
  position:absolute;
  width:4px; height:100%;
  background: linear-gradient(180deg,transparent, rgba(0,255,255,0.9), transparent);
  animation: scanV 1.6s ease-in-out forwards;
}
@keyframes scanV{0%{left:-5%;opacity:1;}50%{left:50%;opacity:0.8;}100%{left:105%;opacity:0;}}

.explosion{
  position:absolute;
  width:15px; height:15px;
  border-radius:50%;
  background: rgba(0,255,255,0.9);
  box-shadow:0 0 25px #00ffff,0 0 35px #00bfff;
  animation: explode 0.8s ease-out forwards;
}
@keyframes explode{
  0%{transform: scale(0);opacity:1;}
  50%{transform: scale(2.5);opacity:0.8;}
  100%{transform: scale(0);opacity:0;}
}

#transition-overlay::after{
  content:'';
  position:absolute;
  width:100%; height:100%;
  top:0; left:0;
  background: repeating-linear-gradient(0deg, rgba(0,255,255,0.05), rgba(0,255,255,0.05) 2px, transparent 2px, transparent 4px);
  animation: glitch 0.2s linear alternate-reverse;
  opacity:0;
}
#transition-overlay.active::after{
  opacity:1;
  animation: glitch 0.2s infinite linear alternate-reverse;
}
@keyframes glitch{0%{transform:translateX(0);}50%{transform:translateX(3px);}100%{transform:translateX(-3px);}}

.intro-screen {
  position: fixed;
  top: 0; left: 0;
  width: 100vw; height: 100vh;
  background: radial-gradient(circle at center, rgba(0, 0, 0, 0.95) 0%, #000 100%);
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden;
}


.intro-screen::before {
  content: "";
  position: absolute;
  inset: 0;
  background-image: linear-gradient(60deg, rgba(0,187,255,0.12) 1px, transparent 1px),
                      linear-gradient(-60deg, rgba(0,187,255,0.12) 1px, transparent 1px);
}
  background-size: 60px 60px;
  z-index: 0;
  opacity: 0.35;
  animation: gridGlow 5s ease-in-out infinite alternate;
}

@keyframes gridGlow {
  0% { opacity: 0.25; filter: brightness(0.8); }
  100% { opacity: 0.5; filter: brightness(1.3); }
}


.holo-panel {
  position: relative;
  background: rgba(0, 20, 40, 0.6);
  backdrop-filter: blur(12px);
  border: 1px solid rgba(0, 187, 255, 0.3);
  box-shadow: 0 0 15px rgba(0, 187, 255, 0.3), inset 0 0 30px rgba(0, 187, 255, 0.2);
  border-radius: 20px;
  padding: 120px 200px;
  text-align: center;
  z-index: 1;

}

@keyframes panelFade {
  from { opacity: 0; transform: scale(1.05); }
  to { opacity: 1; transform: scale(1); }
}


.holo-panel::before {
  content: "";
  position: absolute;
  top: -2px; left: -2px; right: -2px; bottom: -2px;
  border-radius: 20px;
  background: radial-gradient(circle at center, rgba(0,187,255,0.3) 0%, transparent 70%);
  filter: blur(15px);
  z-index: -1;
  animation: haloPulse 3s ease-in-out infinite;
}

@keyframes haloPulse {
  0%, 100% { opacity: 0.3; }
  50% { opacity: 0.7; }
}


.intro-title {
  font-family: 'Orbitron', sans-serif;
  font-size: 60px;
  color: #00bfff;
  text-shadow: 0 0 10px #00bfff, 0 0 25px #00bfff, 0 0 60px #00bfff;
  margin-bottom: 80px;
  letter-spacing: 3px;
  animation: glowText 3s ease-in-out infinite alternate;
}

@keyframes glowText {
    0% { text-shadow: 0 0 15px #00bfff, 0 0 30px #00bfff; }
    100% { text-shadow: 0 0 25px #00bfff, 0 0 70px #00bfff; }
}


.intro-button tw-link {
  display: inline-block;
  background: rgba(0, 0, 0, 0.7);
  border: 2px solid #00bfff;
  border-radius: 12px;
  padding: 20px 80px;
  font-size: 28px;
  color: #00bfff;
  font-family: 'Orbitron', sans-serif;
  text-shadow: 0 0 5px #00bfff, 0 0 20px #00bfff;
  box-shadow: 0 0 20px #00bfff;
  transition: all 0.3s ease;
}

.intro-button tw-link:hover {
  background: #00bfff;
  color: #000;
  box-shadow: 0 0 40px #00bfff, 0 0 100px #00bfff;
  transform: scale(1.05);
}

.intro-button tw-link:active {
  transform: scale(0.95);
}

.intro-screen {
  position: fixed;
  top: 0; left: 0;
  width: 100vw; height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  background: radial-gradient(circle at center, #021014 0%, #000814 60%, #00030a 100%);
  overflow: hidden;
  z-index: 1000;
}


.intro-screen::before {
  content: "";
  position: absolute;
  inset: 0;
  z-index: 0;

  background-image:
    linear-gradient(45deg, rgba(0,187,255,0.18) 25%, transparent 25%),
    linear-gradient(-45deg, rgba(0,187,255,0.18) 25%, transparent 25%),
    linear-gradient(45deg, transparent 75%, rgba(0,187,255,0.10) 75%),
    linear-gradient(-45deg, transparent 75%, rgba(0,187,255,0.10) 75%);
  background-size: 80px 80px;           
  background-position: 0 0, 0 0, 40px 40px, 40px 40px;
  opacity: 0.85;                        
  mix-blend-mode: screen;              
  filter: blur(0.6px) contrast(1.05);   
  transform: translateZ(0);
  pointer-events: none;
  animation: gridMove 14s linear infinite;
}


@keyframes gridMove {
  from { background-position: 0 0, 0 0, 40px 40px, 40px 40px; }
  to   { background-position: 160px 160px, -160px -160px, 200px 200px, -200px -200px; }
}


.intro-screen::after {
  content: "";
  position: absolute;
  inset: 0;
  z-index: 0;
  background: radial-gradient(circle at 50% 40%, rgba(0,187,255,0.08) 0%, transparent 35%);
  pointer-events: none;
  mix-blend-mode: screen;
  opacity: 1;
  animation: haloPulse 6s ease-in-out infinite alternate;
}
@keyframes haloPulse {
  0% { transform: scale(1); opacity: 0.7; }
  100% { transform: scale(1.05); opacity: 1; }
}

.holo-panel { z-index: 2; }
.server-dialogue-scene .dialogue-interface {
  position: relative;
  width: 90%;
  max-width: 1200px;
  height: 550px;
  margin: 10px auto 0 auto;
  background: rgba(0, 10, 20, 0.75);
  border: 2px solid #00ffff;
  border-radius: 18px;
  box-shadow:
    0 0 25px #00ffff88,
    inset 0 0 40px #004466,
    0 0 100px rgba(0, 255, 255, 0.15);
  backdrop-filter: blur(10px);
  overflow-y: auto;
  overflow-x: hidden;
  padding: 35px 55px 45px 55px;
  scrollbar-width: thin;
  scrollbar-color: #00ffff rgba(0,0,0,0.3);
}

.server-dialogue-scene .dialogue-interface::-webkit-scrollbar {
  width: 6px;
}
.server-dialogue-scene .dialogue-interface::-webkit-scrollbar-thumb {
  background: #00ffff;
  border-radius: 6px;
}

.server-dialogue-scene .dialogue-container {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  gap: 1px;
  color: #00eaff;
  min-height: 100%;
  margin-top: 0;
  padding-top: 0;
}


.server-dialogue-scene .typewriter {
  align-self: flex-start;
  background: rgba(0, 30, 50, 0.7);
  border: 1px solid #00ffff;
  box-shadow: 0 0 10px #00ffff, 0 0 30px #0088ff inset;
  border-radius: 10px 10px 10px 0;
  padding: 12px 22px;
  font-size: 20px;
  text-shadow: 0 0 10px #00ffff;
  animation: glowPulse 2.5s infinite ease-in-out;
  margin-top: 0;
  white-space: pre-wrap;
  overflow: hidden;
  border-right: 2px solid #00bfff;
}


.server-dialogue-scene .player-line {
  align-self: flex-end;
}

.server-dialogue-scene .reply-button {
  background: rgba(0, 255, 255, 0.1);
  border: 2px solid #00ffff;
  border-radius: 12px;
  padding: 12px 30px;
  color: #00ffff;
  font-size: 18px;
  letter-spacing: 0.5px;
  font-family: 'Orbitron', sans-serif;
  text-shadow: 0 0 10px #00ffff, 0 0 20px #00bfff;
  box-shadow: 0 0 15px #00ffff;
  cursor: pointer;
  transition: all 0.25s ease-in-out;
}
.server-dialogue-scene .reply-button:hover {
  background: #00ffff;
  color: #000;
  box-shadow: 0 0 40px #00ffff, 0 0 80px #00bfff;
  transform: scale(1.05);
}


@keyframes glowPulse {
  0%, 100% { box-shadow: 0 0 10px #00ffff, 0 0 30px #0088ff inset; }
  50% { box-shadow: 0 0 25px #00ffff, 0 0 40px #00bfff inset; }
}
.server-dialogue-scene .dialogue-container .typewriter:first-of-type {
  margin-top: -120px;
}
ol, ul {
  list-style: none; 
  padding-left: 0;  
  margin: 0;       
}
ol {
  display: flex;
  gap: 10px;
  align-items: stretch;
}

ul {
  display: flex;
  flex-direction: column;
  justify-content:space-between;
  
  gap: 10px;
  
}
.node-value {
  display: inline-block;
  padding: 12px 18px;
  min-width: 50px;
  text-align: center;
  border-radius: 50%; 
  border: 2px solid #00bfff; 
  background: rgba(0, 187, 255, 0.1); 
  color: #00bfff;
  font-family: 'Orbitron', sans-serif;
  font-size: 20px;
  text-shadow: 0 0 5px #00bfff, 0 0 15px #00bfff;
  box-shadow: 0 0 10px #00bfff, 0 0 25px #00ffff inset; 
  transition: all 0.3s ease-in-out;
}

.node-value:hover {
  box-shadow: 0 0 20px #00bfff, 0 0 50px #00ffff inset;
  transform: scale(1.1);
}

